-- @name		ASPv3
-- @version		1.0
-- @authors		Alberto
-- @date		2011/11/27
-- @description	${description}

-- The different sections of a TCS model have been enclosed between BEGIN and END
-- comments below. Additional information is provided below each BEGIN comment.
-- The main sections of interest are "Class templates", and
-- "Operator table" (the latter only for DSLs using operators).
syntax ASPv3 {

-- BEGIN Primitive templates
-- Specifies representation of primitive types.
-- Only needs modification when default lexer is not satisfactory.
-- Generally modified along with the lexer.
	primitiveTemplate identifier for String default using NAME:
		value = "%token%";

	primitiveTemplate stringSymbol for String using STRING:
		value = "ei.unescapeString(%token%, 1)",
		serializer="'\'' + %value%.toCString() + '\''";

	primitiveTemplate integerSymbol for Integer default using INT:
		value = "Integer.valueOf(%token%)";

	primitiveTemplate floatSymbol for Double default using FLOAT:
		value = "Double.valueOf(%token%)";
-- END Primitive templates

-- BEGIN Class templates
-- Specifies representation of classes.
-- This is the main section to work on.
	template Transformation main:
		[metamodels]
		[relations]
		[constraints]
		[usedLiterals]
	;
	
	template Metamodel:
		"metamodel("name")""."
	;
	
	template Relation:
		"relation_direction(|"relationId"|,"(left2right?"1":"0")","(right2left?"1":"0")")""."
		[lpattern]
		[rpattern]
	;
	
	template Pattern abstract;
	
	template LeftPattern:
		(isMetanode?"relation_node")(isMetaprop?"relation_prop")(isMetaedge?"relation_edge")"(|"relationId"|,"element")""."
	;
	
	template RightPattern:
		(isMetanode?"relation_node")(isMetaprop?"relation_prop")(isMetaedge?"relation_edge")"(|"relationId"|,"element")""."
	;
	
	template PatternElement abstract;
	
	template Metanode :
		metamodel{refersTo=name, autoCreate=never, lookIn=#all}","name
	;
	--DOC: we already created all used metamodels and literals so there is no need to generate another metamodel or literal but it is needed to reference it
	
	template Metaprop:
		metamodel{refersTo=name, autoCreate=never, lookIn=#all}","metaClass","name
	;
	--DOC: we already created all used metamodels and literals so there is no need to generate another metamodel or literal but it is needed to reference it
	
	template Metaedge:
		metamodel{refersTo=name, autoCreate=never, lookIn=#all}","name","sourceMetaClass","targetMetaClass
	;
	--DOC: we already created all used metamodels and literals so there is no need to generate another metamodel or literal but it is needed to reference it
	
	template Constraint:
		":-"contents{separator=", "} "."
	;
	
	template ConstraintElement abstract;
	
	template Expression abstract;
	
	template Terminal:
		content
	;
	
	template TerminalElement abstract;
	
	template FunctionParameter abstract;

	template Node:
		(isNodex?"nodex":(isTrace?"trace_node":"node"))"("metamodel{refersTo=name, autoCreate=never, lookIn=#all}","nodeId","metaClass")"
	;
	--DOC: we already created all used metamodels and literals so there is no need to generate another metamodel or literal but it is needed to reference it
	
	template Prop:
		(isPropx?"propx":(isTrace?"trace_prop":"prop"))"("metamodel{refersTo=name, autoCreate=never, lookIn=#all}","propId","metaClassId","name","propValue")"
	;
	--DOC: we already created all used metamodels and literals so there is no need to generate another metamodel or literal but it is needed to reference it
	
	template Edge:
		(isEdgex?"edgex":(isTrace?"trace_edge":"edge"))"("metamodel{refersTo=name, autoCreate=never, lookIn=#all}","edgeId","name","sourceMCId","targetMCId")"
	;
	--DOC: we already created all used metamodels and literals so there is no need to generate another metamodel or literal but it is needed to reference it
	
	template Not:
		"not" element
	;
	
	template Eq:
		left1{refersTo=name, autoCreate=never, lookIn=#all}"=="right1{refersTo=name, autoCreate=never, lookIn=#all}
	;
	--DOC: we already created all used metamodels and literals so there is no need to generate another metamodel or literal but it is needed to reference it
	
	template EqSimple:
		left1{refersTo=name, autoCreate=never, lookIn=#all}"="right1{refersTo=name, autoCreate=never, lookIn=#all}
	;
	--DOC: we already created all used metamodels and literals so there is no need to generate another metamodel or literal but it is needed to reference it
	
	template NotEq:
		left1{refersTo=name, autoCreate=never, lookIn=#all}"!="right1{refersTo=name, autoCreate=never, lookIn=#all}
	;
	--DOC: we already created all used metamodels and literals so there is no need to generate another metamodel or literal but it is needed to reference it
	
	template Literal:
		name(isDefinition?".")
	;
	--DOC: when the literal is defined it is followed by a dot, when used the name is sufficient
		
-- END Class templates

-- BEGIN Special symbols
-- Possible modifications:
--	- Addition of new symbols.
--	- Modification of spaces information.
--	- Removal of unused symbols so that using these symbols results in lexical
--	error rather than parsing error.
	symbols {
		lsquare		= "[";
		rsquare		= "]"	: rightSpace;
		excl		= "!";
		coma		= ","	: leftNone, rightNone;
		lparen		= "(";
		rparen		= ")"	: leftNone, rightSpace;
		lcurly		= "{"	: leftSpace;
		rcurly		= "}"	: leftNone, rightNone;
		semi		= ";"	: leftNone, rightSpace;
		colon		= ":"	: leftSpace, rightSpace;
		pipe		= "|"	: leftSpace, rightSpace;
		sharp		= "#"	: leftSpace;
		qmark		= "?";
		coloncolon	= "::"	: leftNone, rightNone;

		-- operator symbols
		point		= "."	: leftNone;
		rarrow		= "->"	: leftNone;
		minus		= "-"	: leftSpace, rightSpace;
		star		= "*"	: leftSpace, rightSpace;
		slash		= "/"	: leftSpace, rightSpace;
		plus		= "+"	: leftSpace, rightSpace;
		eq			= "="	: leftSpace, rightSpace;
		gt			= ">"	: leftSpace, rightSpace;
		lt			= "<"	: leftSpace, rightSpace;
		ge			= ">="	: leftSpace, rightSpace;
		le			= "<="	: leftSpace, rightSpace;
		ne			= "<>"	: leftSpace, rightSpace;
		larrow		= "<-"	: leftSpace, rightSpace;
	}
-- END Special symbols

-- BEGIN Operator table
-- Defines all operators with their priority, arity, and associativity.
-- All defined operators must be used in operator templates.

-- Specify operator table(s) here if necessary.

-- END Operator table


-- BEGIN Lexer
-- Specifies the lexical entities.
-- Only needs modification when default lexer is not satisfactory.
-- Generally modified along with Primitive templates.
	token COMMENT	: endOfLine(start = "%");
	token STRING	: multiLine(start = "\'", end = "\'", esc = "\\");

	lexer = "
%options testLiterals = false;

NL
	:	(	'\\r' '\\n'
		|	'\\n' '\\r'	//Improbable
		|	'\\r'
		|	'\\n'
		)
	{newline();}
	;

WS
	:	(	' '
		|	'\\t'
		)
	;

%protected
DIGIT
	:	'0'..'9'
	;

%protected
ALPHA
	:	'a'..'z'
	|	'A'..'Z'
	|	'_'
	//For Unicode compatibility (from 0000 to 00ff)
	|	'\\u00C0' .. '\\u00D6'
	|	'\\u00D8' .. '\\u00F6'
	|	'\\u00F8' .. '\\u00FF'
	;

%protected
SNAME
%v2	options {
%v2		testLiterals = true;
%v2	}
	:	(ALPHA) (ALPHA | DIGIT)*
;

NAME
	:	(
%v3			SNAME
%v2			s:SNAME {if(s.getType() != SNAME) $setType(s.getType());}
		|	'\"'!
			(	ESC
			|	'\\n' {newline();}
			|	~('\\\\'|'\\\"'|'\\n')
			)*
			'\"'!
%v3			{setText(ei.unescapeString(getText(), 1));}
		)
	;

INT
	:	(DIGIT)+
%v2		(('.' DIGIT)=> '.' (DIGIT)+ {$setType(FLOAT);})?
	;

%v3	FLOAT	:	DIGIT+ '.' DIGIT*	;

%protected
ESC
	:	'\\\\'!
		(	'n' %v2{%setText(\"\\n\");}
		|	'r' %v2{%setText(\"\\r\");}
		|	't' %v2{%setText(\"\\t\");}
		|	'b' %v2{%setText(\"\\b\");}
		|	'f' %v2{%setText(\"\\f\");}
		|	'\"' %v2{%setText(\"\\\"\");}
		|	'\\'' %v2{%setText(\"\\'\");}
		|	'\\\\' %v2{%setText(\"\\\\\");}
		|	(
				('0'..'3')
				(
%v2					options {
%v2						warnWhenFollowAmbig = false;
%v2					}
				:	('0'..'7')
					(
%v2						options {
%v2							warnWhenFollowAmbig = false;
%v2						}
					:	'0'..'7'
					)?
				)?
			|	('4'..'7')
				(
%v2					options {
%v2						warnWhenFollowAmbig = false;
%v2					}
				:	('0'..'7')
				)?
			)
				{
%v2					String s = %getText;
%v2					int i;
%v2					int ret = 0;
%v2					String ans;
%v2					for (i=0; i<s.length(); ++i)
%v2						ret = ret*8 + s.charAt(i) - '0';
%v2					ans = String.valueOf((char) ret);
%v2					%setText(ans);
				}
		)
	;
	";
-- END Lexer

}

--BONUS DOC: learning TCS = http://cubiclebot.com/wp-content/uploads/2011/11/wisdom_of_the_ancients.jpg :)
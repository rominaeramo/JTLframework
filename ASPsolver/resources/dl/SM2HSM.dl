%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%  SM 2 HSM  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%  STATE MACHINE METAMODEL  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  metamodel(x_SM).
  metanode(x_SM, x_State).
  metanode(x_SM, x_Transition).
  metanode(x_SM, x_StateMachine).
  metanode(x_SM, x_InitialState).
  metanode(x_SM, x_FinalState).

  metaedge(x_SM, association, x_incoming, x_State, x_Transition).
  metaedge(x_SM, association, x_owningStateMachine, x_State, x_StateMachine).
  metaedge(x_SM, association, x_target, x_Transition, x_State).
  metaedge(x_SM, association, x_target, x_Transition, x_InitialState).
  metaedge(x_SM, association, x_target, x_Transition, x_FinalState).
  metaedge(x_SM, association, x_source, x_Transition, x_State).
  metaedge(x_SM, association, x_source, x_Transition, x_InitialState).
  metaedge(x_SM, association, x_source, x_Transition, x_FinalState).
  metaedge(x_SM, composition, x_ownedState, x_StateMachine, x_State).
  metaedge(x_SM, composition, x_ownedState, x_StateMachine, x_InitialState).
  metaedge(x_SM, composition, x_ownedState, x_StateMachine, x_FinalState).
  metaedge(x_SM, composition, x_ownedTransition, x_StateMachine, x_Transition).
  metaedge(x_SM, association, x_incoming, x_InitialState, x_Transition).
  metaedge(x_SM, association, x_owningStateMachine, x_InitialState, x_StateMachine).
  metaedge(x_SM, association, x_EReference0, x_InitialState, x_State).
  metaedge(x_SM, association, x_EReference0, x_InitialState, x_InitialState).
  metaedge(x_SM, association, x_EReference0, x_InitialState, x_FinalState).
  metaedge(x_SM, generalization, x_general, x_InitialState, x_State).
  metaedge(x_SM, association, x_incoming, x_FinalState, x_Transition).
  metaedge(x_SM, association, x_owningStateMachine, x_FinalState, x_StateMachine).
  metaedge(x_SM, generalization, x_general, x_FinalState, x_State).

  metaprop(x_SM, x_name, x_State).
  metaprop(x_SM, x_trigger, x_Transition).
  metaprop(x_SM, x_effect, x_Transition).
  metaprop(x_SM, x_name, x_InitialState).
  metaprop(x_SM, x_name, x_FinalState).
  
%%%%%%%%%%%%%%%%%%%%%%   HIERARCHICAL STATE MACHINE METAMODEL  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  metamodel(x_HSM).
  metanode(x_HSM, x_State).
  metanode(x_HSM, x_Transition).
  metanode(x_HSM, x_CompositeState).
  metanode(x_HSM, x_StateMachine).
  metanode(x_HSM, x_InitialState).
  metanode(x_HSM, x_FinalState).

  metaedge(x_HSM, association, x_owningCompositeState, x_State, x_CompositeState).
  metaedge(x_HSM, association, x_target, x_Transition, x_State).
  metaedge(x_HSM, association, x_target, x_Transition, x_CompositeState).
  metaedge(x_HSM, association, x_target, x_Transition, x_InitialState).
  metaedge(x_HSM, association, x_target, x_Transition, x_FinalState).
  metaedge(x_HSM, association, x_source, x_Transition, x_State).
  metaedge(x_HSM, association, x_source, x_Transition, x_CompositeState).
  metaedge(x_HSM, association, x_source, x_Transition, x_InitialState).
  metaedge(x_HSM, association, x_source, x_Transition, x_FinalState).
  metaedge(x_HSM, association, x_owningCompositeState, x_CompositeState, x_CompositeState).
  metaedge(x_HSM, composition, x_ownedSubState, x_CompositeState, x_State).
  metaedge(x_HSM, composition, x_ownedSubState, x_CompositeState, x_CompositeState).
  metaedge(x_HSM, composition, x_ownedSubState, x_CompositeState, x_InitialState).
  metaedge(x_HSM, composition, x_ownedSubState, x_CompositeState, x_FinalState).
  metaedge(x_HSM, generalization, x_general, x_CompositeState, x_State).
  metaedge(x_HSM, composition, x_ownedState, x_StateMachine, x_State).
  metaedge(x_HSM, composition, x_ownedState, x_StateMachine, x_CompositeState).
  metaedge(x_HSM, composition, x_ownedState, x_StateMachine, x_InitialState).
  metaedge(x_HSM, composition, x_ownedState, x_StateMachine, x_FinalState).
  metaedge(x_HSM, composition, x_ownedTransition, x_StateMachine, x_Transition).
  metaedge(x_HSM, association, x_owningCompositeState, x_InitialState, x_CompositeState).
  metaedge(x_HSM, generalization, x_general, x_InitialState, x_State).
  metaedge(x_HSM, association, x_owningCompositeState, x_FinalState, x_CompositeState).
  metaedge(x_HSM, generalization, x_general, x_FinalState, x_State).

  metaprop(x_HSM, x_name, x_State).
  metaprop(x_HSM, x_trigger, x_Transition).
  metaprop(x_HSM, x_effect, x_Transition).
  metaprop(x_HSM, x_name, x_CompositeState).
  metaprop(x_HSM, x_name, x_InitialState).
  metaprop(x_HSM, x_name, x_FinalState).



%%%%%%%%%%%%%%%%%%%%%%   STATE MACHINE MODEL  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

model(hsm, x_HSM).
node(x_HSM, 1, "x/1", x_StateMachine).
node(x_HSM, 2, "x/2", x_State).
%prop(x_HSM, 3, "x/3", 2, "x/2",x_name, "idle").
node(x_HSM, 3, "x/3", x_State).
node(x_HSM, 4, "x/4", x_State).


%node(x_SM, 4, "x/4", x_Transition).
%edge(x_SM, 5, "x/5", x_source, 4, "x/4", 2, "x/2").
%edge(x_SM, 6, "x/6", x_target, 4, "x/4", 3, "x/3").
edge(x_SM, 7, "x/7", x_ownedState, 1, "x/1", 2, "x/2").
%edge(x_SM, 8, "x/8", x_ownedState, 1, "x/1", 3, "x/3").
%edge(x_SM, 9, "x/9", x_ownedTransition, 1, "x/1", 4, "x/4").

%%%%%%%%%%%%%%%%%%%%%%  NON  HIERARCHICAL STATE MACHINE MODEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%%%%%%%%%%%%   TRACE MODEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
%%%%%%%%%%%%%%%%%%%%%%     RELATIONS   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#const mmt = x_HSM.


relation_node("x_r1", x_SM, x_StateMachine, 0).
relation_node("x_r1", x_HSM, x_StateMachine, 0).
:- node(x_HSM, ID, IDx, x_StateMachine), not nodex(x_SM, ID, IDx, x_StateMachine), mmt = x_SM.
:- node(x_SM, ID, IDx, x_StateMachine), not nodex(x_HSM, ID, IDx, x_StateMachine), mmt = x_HSM.


relation_node("x_r2", x_HSM, x_InitialState, 0).
relation_node("x_r2", x_SM, x_InitialState, 0).
:- node(x_HSM, ID, IDx, x_InitialState), not nodex(x_SM, ID, IDx, x_InitialState), mmt = x_SM.
:- node(x_SM, ID, IDx, x_InitialState), not nodex(x_HSM, ID, IDx, x_InitialState), mmt = x_HSM.


relation_node("x_r3",  x_HSM, x_FinalState, 0).
relation_node("x_r3", x_SM, x_FinalState, 0).
:- node(x_HSM, ID, IDx, x_InitialState), not nodex(x_SM, ID, IDx, x_InitialState), mmt = x_SM.
:- node(x_SM, ID, IDx, x_InitialState), not nodex(x_HSM, ID, IDx, x_InitialState), mmt = x_HSM.

relation_node("x_r4", x_SM, x_State, 0).
relation_node("x_r4", x_HSM, x_State, 1).
relation_node("x_r4",  x_HSM, x_CompositeState, 0).
%:- node(x_SM, ID, IDx, x_State), not nodex(x_HSM, ID, IDx , x_CompositeState), mmt = x_HSM.
%:- node(x_SM, ID, IDx, x_State), not nodex(x_HSM, ID + 1, IDx , x_State), mmt = x_HSM.
:- node(x_SM, ID, IDx, x_State), nodex(x_HSM, ID + 1, IDx , x_State), not nodex(x_HSM, ID, IDx , x_CompositeState), mmt = x_HSM.
:- node(x_SM, ID, IDx, x_State), nodex(x_HSM, ID + 1, IDx , x_State), nodex(x_HSM, ID, IDx , x_State), mmt = x_HSM.
%:- node(x_HSM, ID, IDx, x_CompositeState), not nodex(x_SM, ID, IDx, x_State), mmt = x_SM.

	
relation_node("x_r5", x_SM, x_State, 0).
relation_node("x_r5", x_HSM, x_State, 0).
:- node(x_SM, ID, IDx, x_State), not nodex(x_HSM, ID, IDx, x_CompositeState), not nodex(x_HSM, ID, IDx, x_State), mmt = x_HSM.
%:- node(x_SM, ID, IDx, x_State), nodex(x_HSM, ID, IDx, x_State), nodex(x_HSM, ID, IDx, x_CompositeState), mmt = x_HSM.
:- node(x_HSM, ID, IDx, x_State), not nodex(x_SM, ID, IDx, x_State), mmt = x_SM.

relation_node("x_r51", x_SM, x_State, 0).
relation_node("x_r51",  x_HSM, x_CompositeState, 0).
%:- node(x_SM, ID, IDx, x_State), not nodex(x_HSM, ID, IDx, x_CompositeState), mmt = x_HSM.
:- node(x_HSM, ID, IDx, x_State), not nodex(x_SM, ID, IDx, x_CompositeState), mmt = x_SM.


relation_node("x_r6", x_HSM, x_Transition, 0).
relation_node("x_r6", x_SM, x_Transition, 0).
:- node(x_HSM, ID, IDx, x_Transition), not nodex(x_SM, ID, IDx, x_Transition), mmt = x_SM.
:- node(x_SM, ID, IDx, x_Transition), not nodex(x_HSM, ID, IDx, x_Transition), mmt = x_HSM.




relation_edge("x_r7",  x_SM, x_source, x_Transition, x_State, 0).
relation_edge("x_r7", x_HSM, x_source, x_Transition, x_CompositeState, 0).

relation_edge("x_r8",  x_SM, x_source, x_Transition, x_State, 0).
relation_edge("x_r8", x_HSM, x_source, x_Transition, x_State, 0).

:- edge(x_SM, ID, IDx, x_source, IDS, IDSx, IDT, IDTx), not is_edge_id(x_HSM, ID, IDx), mmt = x_HSM. %elimino le soluzioni senza x_source



relation_edge("x_r9",  x_SM, x_target, x_Transition, x_State, 0).
relation_edge("x_r9", x_HSM, x_target, x_Transition, x_CompositeState, 0).

relation_edge("x_r10",  x_SM, x_target, x_Transition, x_State, 0).
relation_edge("x_r10", x_HSM, x_target, x_Transition, x_State, 0).

:- edge(x_SM, ID, IDx, x_target, IDS, IDSx, IDT, IDTx), not is_edge_id(x_HSM, ID, IDx), mmt = x_HSM. %elimino le soluzioni senza x_target


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%%%%%%%%%%%%%%%%%%%%%%     CONCRETIZATION RULES   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 


%elimino le soluzioni con x_source con id non duplicati (ottengo may model)
%:- edge(x_SM, ID, IDx, x_source, IDS, IDSx, IDT, IDTx), 
%  not is_multiple_edge_id(x_HSM, ID, IDx), mmt = x_HSM.

%elimino le soluzioni con x_target con id non duplicati (ottengo may model)
%:- edge(x_SM, ID, IDx, x_target, IDS, IDSx, IDT, IDTx), 
%   not is_multiple_edge_id(x_HSM, ID, IDx), mmt = x_HSM.

%elimino le soluzioni con edge con id duplicati (ottengo concretizzazioni)
%:- edge(x_SM, ID, IDx, Edge, IDS, IDSx, IDT, IDTx), 
%   is_multiple_edge_id(x_HSM, ID, IDx), mmt = x_HSM.

:- 
%node(x_SM, ID, IDx, Node), 
   is_multiple_node_id(x_HSM, ID, IDx), mmt = x_HSM.

%elimino le soluzioni che hanno edge con id non duplicati e edge senza id duplicati (ottengo may model + concretizzazioni)
%:- edge(x_SM, ID, IDx, Edge, IDS, IDSx, IDT, IDTx), 
%   not is_multiple_edge_id(x_HSM, ID, IDx),   
%   edge(x_SM, ID2, IDx2, Edge2, IDS, IDSx, IDT2, IDTx2), 
%   is_multiple_edge_id(x_HSM, ID2, IDx2), 
%   mmt = x_HSM.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% garbage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%elimino le soluzioni con x_source con id duplicati (ottengo concretizzazioni)
%%:- edge(x_SM, ID, IDx, x_source, IDS, IDSx, IDT, IDTx), 
%%   is_multiple_edge_id(x_HSM, ID, IDx), mmt = x_HSM.

%%elimino le soluzioni con x_target con id duplicati (ottengo concretizzazioni)
%%:- edge(x_SM, ID, IDx, x_target, IDS, IDSx, IDT, IDTx), 
%%  is_multiple_edge_id(x_HSM, ID, IDx), mmt = x_HSM.

%%elimino le soluzioni con edge con id non duplicati (ottengo may model)
%%:- edge(x_SM, ID, IDx, Edge, IDS, IDSx, IDT, IDTx), 
%%   not is_multiple_edge_id(x_HSM, ID, IDx), mmt = x_HSM.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%%%%%%%%%%%%%%%%%%%%%%        AUXILIARY RULES     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 



is_edge_id(MM, ID, IDx) :- edgex(MM, ID, IDx, Edge, IDS, IDSx,  IDT, IDTx).

is_multiple_edge_id(MM, ID, IDx) :- edgex(MM, ID, IDx, Edge, IDS, IDSx, IDT, IDTx), 
                                    edgex(MM, ID, IDx, Edge, IDS, IDSx, IDT2, IDTx), IDT != IDT2.
                                    
                                  
is_node_id(MM, ID, IDx) :- nodex(MM, ID, IDx, Node).

is_multiple_node_id(MM, ID, IDx) :- nodex(MM, ID, IDx, Node), 
                                    nodex(MM, ID, IDx, Node2), Node != Node2.                                    


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%%%%%%%%%%%%%%%%%%%%%%    TRANSFORMATION ENGINE   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 


%%%%%%%%%%%%%%%%%%%%%%   TRACES GENERATION    %s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%% Metamodel Target Conformance Check %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

is_target_metamodel_conform(MM,Node) :- metanode(MM,Node).
is_target_metamodel_conform(MM,Prop) :- metaprop(MM,Prop,Node).
is_target_metamodel_conform(MM,Edge) :- metaedge(MM,MetaEdge,Edge,NodeSource,NodeTarget).

%%%%%%%%%% Relations Check %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

is_related(MM,Node) :- relation_node(R,MM,Node,X), relation_node(R,MM2,Node2,Y).
is_related(MM,Prop) :- relation_prop(R,MM,Prop,Node), relation_prop(R,MM2,Prop2,Node2).
is_related(MM,Edge) :- relation_edge(R,MM,Edge,NodeSource,NodeTarget,X), relation_edge(R,MM2,Edge2,NodeSource2,NodeTarget2,Y).

%%%%%%%%%% Mapping Rules %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%node from node
%mapping_node(MM,ID,IDx,Node) :- relation_node(R,MM,Node,X), relation_node(R,MM2,Node2,Y),node(MM2,ID,IDx,Node2), MM!=MM2.
mapping_node(MM,ID + X,IDx, Node) :- relation_node(R,MM,Node,X), relation_node(R,MM2,Node2,Y),node(MM2,ID,IDx,Node2), MM!=MM2.

%prop from prop        
%mapping_prop(MM,ID,IDmc,Prop,Value) :- relation_prop(R,MM,Prop,Node), relation_prop(R,MM2,Prop2,Node2), 
%              prop(MM2,ID,IDmc2,Prop2,Value2), setting_prop(R,ID,IDmc,Value), MM!=MM2.
       
%edge from edge         
mapping_edge(MM,ID + X,IDx,Edge,IDS,IDSx,IDT,IDTx) :- 
			relation_edge(R,MM,Edge,NodeSource,NodeTarget,X),relation_edge(R,MM2,Edge2,NodeSource2,NodeTarget2,Y), 
            edge(MM2,ID,IDx,Edge2,IDS,IDSx,IDT,IDTx), MM!=MM2.

mapping_edge(MM,ID + X,IDx,Edge,IDS,IDSx,IDT + Z,IDTx) :- 
			relation_edge(R,MM,Edge,NodeSource,NodeTarget,X),relation_edge(R,MM2,Edge2,NodeSource2,NodeTarget2,Y), 
            edge(MM2,ID,IDx,Edge2,IDS,IDSx,IDT,IDTx), 
            relation_node(R1,MM,Node,Z), relation_node(R1,MM2,Node2,W),node(MM2,IDT,IDTx,Node2),
            MM!=MM2.
            
            
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%% Generability Check %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
												
is_generable_node(MM,ID,IDx,Node) v -is_generable_node(MM,ID,IDx,Node) :- mapping_node(MM,ID,IDx,Node), is_related(MM,Node), 
														is_target_metamodel_conform(MM,Node), MM=mmt.
														
%is_generable_node(R,MM,ID,IDx,Node) v -is_generable_node(R,MM,ID,IDx,Node) :- mapping_node(R,MM,ID,IDx,Node), is_related(MM,Node), 
														%is_target_metamodel_conform(MM,Node), MM=mmt.
														
																												
%:- -is_generable_node(MM,ID,IDx,Node).

%is_generable_prop(MM,ID,Prop,Value) v -is_generable_prop(MM,ID,Prop,Value) :- mapping_prop(MM,ID,IDmc,Prop,Value), is_related(MM,Prop), 
%														is_target_metamodel_conform(MM,Prop), MM=mmt.
%:--is_generable_prop(MM,ID,Prop,Value).
									
is_generable_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx) v -is_generable_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx) :- mapping_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx), 
														is_related(MM,Edge), is_target_metamodel_conform(MM,Edge),MM=mmt.
%:- -is_generable_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx). 														
														
			
%%%%%%%%% Element Generation by Transformation Rule %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

nodex(MM,ID,IDx,Node) :- is_generable_node(MM,ID,IDx,Node), mapping_node(MM,ID,IDx,Node),MM=mmt.

%rule_nodex(R,MM,ID,IDx,Node) :- is_generable_node(R,MM,ID,IDx,Node), mapping_node(R,MM,ID,IDx,Node),MM=mmt.

%propx(MM,ID,IDmc,Prop,Value) :- is_generable_prop(MM,ID,Prop,Value), mapping_prop(MM,ID,IDmc,Prop,Value), MM=mmt.

edgex(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx) :- is_generable_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx), mapping_edge(MM,ID,IDx,Edge,IDS,IDSx,IDT,IDTx), MM=mmt.	
    

%%%%%%%%% Element Generation by Traces %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
              

           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%						


%unode(MM, ID, IDx) :- node(MM1, ID, IDx), nodex(MM, ID, IDx).





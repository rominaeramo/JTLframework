-- @atlcompiler atl2006
-- Generated by: MM2ASPmGenerator
module UML2ASPm;

create OUT : ASPm from IN : UML; 

helper def: model : ASPm!Model = OclUndefined;

helper def: rootElement : OclAny = UML!EObject.allInstancesFrom('IN')->select(e | e.refImmediateComposite().oclIsUndefined()).first();

helper context String def : normalize() : String = '_x_' + self;

helper context String def : contains(s : String) : Boolean = self.indexOf(s)  > 0;

helper context String def : getId() : Integer =
if(self.contains('__idTrace:')) then
	self.split('_ASPid_').at(1).toInteger()
else
	thisModule.count()
endif;

helper context String def : getIdTrace() : String =
if(self.contains('__idTrace:')) then
	self.split('_ASPid_').at(2)
else
	self
endif;

helper def: counter : Integer = 0;

rule count() {
	 do {
		thisModule.counter <- thisModule.counter + 1;
		thisModule.counter;
	}
}

entrypoint rule createModel() {
	 to
		t : ASPm!Model (
			id <- ('m' + thisModule.rootElement.__xmiID__).normalize(),
			metamodel <- 'UML'.normalize()
		)
	 do {
		thisModule.model<- t;
	}
}

rule createProp(s : UML!Eobject, tuple : TupleType(attr : UML!EAttribute, value : String)) {
to
	t : ASPm!Prop(
		idTrace <- (s.__xmiID__.getIdTrace() + s.eClass().eAllAttributes.indexOf(tuple.attr).toString()).normalize(),
		id <- (s.__xmiID__.getId().toString() + s.eClass().eAllAttributes.indexOf(tuple.attr).toString()).toInteger(),
		name <- tuple.attr.name.normalize(),
		value <- tuple.value.normalize(),
		model <- thisModule.model,
		node <- s
	)
	do {
		t;
	}
}

rule createEdge(s : UML!Eobject, tuple : TupleType(ref : UML!EReference, target : UML!Eobject)) {
to
	t : ASPm!Edge(
		idTrace <- (s.__xmiID__.getIdTrace() + thisModule.count().toString()).normalize(),
		id <- (s.__xmiID__.getId().toString() + thisModule.count().toString()).toInteger(),
		name <- tuple.ref.name.normalize(),
		model <- thisModule.model,
		source <- s,
		target <- tuple.target
	)
	do {
		t;
	}
}

rule Package {
	from s : UML!Package(s.oclIsTypeOf(UML!Package))
	to  t : ASPm!Node (
		idTrace <- s.__xmiID__.getIdTrace().normalize(),
		id <- s.__xmiID__.getId(),
		model <- thisModule.model,
		metaclass <- 'Package'.normalize()
	)
	do {
		s.eClass().eAllReferences->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{ref = e, target = e2})))).flatten()->collect(e | thisModule.createEdge(s, e));
		s.eClass().eAllAttributes->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{attr = e, value = e2.toString()})))).flatten()->collect(e | thisModule.createProp(s, e));
	}
}

rule PrimitiveDataType {
	from s : UML!PrimitiveDataType(s.oclIsTypeOf(UML!PrimitiveDataType))
	to  t : ASPm!Node (
		idTrace <- s.__xmiID__.getIdTrace().normalize(),
		id <- s.__xmiID__.getId(),
		model <- thisModule.model,
		metaclass <- 'PrimitiveDataType'.normalize()
	)
	do {
		s.eClass().eAllReferences->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{ref = e, target = e2})))).flatten()->collect(e | thisModule.createEdge(s, e));
		s.eClass().eAllAttributes->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{attr = e, value = e2.toString()})))).flatten()->collect(e | thisModule.createProp(s, e));
	}
}

rule Class {
	from s : UML!Class(s.oclIsTypeOf(UML!Class))
	to  t : ASPm!Node (
		idTrace <- s.__xmiID__.getIdTrace().normalize(),
		id <- s.__xmiID__.getId(),
		model <- thisModule.model,
		metaclass <- 'Class'.normalize()
	)
	do {
		s.eClass().eAllReferences->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{ref = e, target = e2})))).flatten()->collect(e | thisModule.createEdge(s, e));
		s.eClass().eAllAttributes->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{attr = e, value = e2.toString()})))).flatten()->collect(e | thisModule.createProp(s, e));
	}
}

rule Attribute {
	from s : UML!Attribute(s.oclIsTypeOf(UML!Attribute))
	to  t : ASPm!Node (
		idTrace <- s.__xmiID__.getIdTrace().normalize(),
		id <- s.__xmiID__.getId(),
		model <- thisModule.model,
		metaclass <- 'Attribute'.normalize()
	)
	do {
		s.eClass().eAllReferences->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{ref = e, target = e2})))).flatten()->collect(e | thisModule.createEdge(s, e));
		s.eClass().eAllAttributes->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{attr = e, value = e2.toString()})))).flatten()->collect(e | thisModule.createProp(s, e));
	}
}

rule Association {
	from s : UML!Association(s.oclIsTypeOf(UML!Association))
	to  t : ASPm!Node (
		idTrace <- s.__xmiID__.getIdTrace().normalize(),
		id <- s.__xmiID__.getId(),
		model <- thisModule.model,
		metaclass <- 'Association'.normalize()
	)
	do {
		s.eClass().eAllReferences->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{ref = e, target = e2})))).flatten()->collect(e | thisModule.createEdge(s, e));
		s.eClass().eAllAttributes->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{attr = e, value = e2.toString()})))).flatten()->collect(e | thisModule.createProp(s, e));
	}
}


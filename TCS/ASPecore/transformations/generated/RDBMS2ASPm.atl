-- @atlcompiler atl2006
-- Generated by: MM2ASPmGenerator
module RDBMS2ASPm;

create OUT : ASPm from IN : RDBMS; 

helper def: model : ASPm!Model = OclUndefined;

helper def: rootElement : OclAny = RDBMS!EObject.allInstancesFrom('IN')->select(e | e.refImmediateComposite().oclIsUndefined()).first();

helper context String def : normalize() : String = '_x_' + self;

helper context String def : contains(s : String) : Boolean = self.indexOf(s)  > 0;

helper context String def : getId() : Integer =
if(self.contains('__idTrace:')) then
	self.split('_ASPid_').at(1).toInteger()
else
	thisModule.count()
endif;

helper context String def : getIdTrace() : String =
if(self.contains('__idTrace:')) then
	self.split('_ASPid_').at(2)
else
	self
endif;

helper def: counter : Integer = 0;

rule count() {
	 do {
		thisModule.counter <- thisModule.counter + 1;
		thisModule.counter;
	}
}

entrypoint rule createModel() {
	 to
		t : ASPm!Model (
			id <- ('m' + thisModule.rootElement.__xmiID__).normalize(),
			metamodel <- 'RDBMS'.normalize()
		)
	 do {
		thisModule.model<- t;
	}
}

rule createProp(s : RDBMS!Eobject, tuple : TupleType(attr : RDBMS!EAttribute, value : String)) {
to
	t : ASPm!Prop(
		idTrace <- (s.__xmiID__.getIdTrace() + s.eClass().eAllAttributes.indexOf(tuple.attr).toString()).normalize(),
		id <- (s.__xmiID__.getId().toString() + s.eClass().eAllAttributes.indexOf(tuple.attr).toString()).toInteger(),
		name <- tuple.attr.name.normalize(),
		value <- tuple.value.normalize(),
		model <- thisModule.model,
		node <- s
	)
	do {
		t;
	}
}

rule createEdge(s : RDBMS!Eobject, tuple : TupleType(ref : RDBMS!EReference, target : RDBMS!Eobject)) {
to
	t : ASPm!Edge(
		idTrace <- (s.__xmiID__.getIdTrace() + thisModule.count().toString()).normalize(),
		id <- (s.__xmiID__.getId().toString() + thisModule.count().toString()).toInteger(),
		name <- tuple.ref.name.normalize(),
		model <- thisModule.model,
		source <- s,
		target <- tuple.target
	)
	do {
		t;
	}
}

rule Schema {
	from s : RDBMS!Schema(s.oclIsTypeOf(RDBMS!Schema))
	to  t : ASPm!Node (
		idTrace <- s.__xmiID__.getIdTrace().normalize(),
		id <- s.__xmiID__.getId(),
		model <- thisModule.model,
		metaclass <- 'Schema'.normalize()
	)
	do {
		s.eClass().eAllReferences->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{ref = e, target = e2})))).flatten()->collect(e | thisModule.createEdge(s, e));
		s.eClass().eAllAttributes->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{attr = e, value = e2.toString()})))).flatten()->collect(e | thisModule.createProp(s, e));
	}
}

rule Table {
	from s : RDBMS!Table(s.oclIsTypeOf(RDBMS!Table))
	to  t : ASPm!Node (
		idTrace <- s.__xmiID__.getIdTrace().normalize(),
		id <- s.__xmiID__.getId(),
		model <- thisModule.model,
		metaclass <- 'Table'.normalize()
	)
	do {
		s.eClass().eAllReferences->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{ref = e, target = e2})))).flatten()->collect(e | thisModule.createEdge(s, e));
		s.eClass().eAllAttributes->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{attr = e, value = e2.toString()})))).flatten()->collect(e | thisModule.createProp(s, e));
	}
}

rule Column {
	from s : RDBMS!Column(s.oclIsTypeOf(RDBMS!Column))
	to  t : ASPm!Node (
		idTrace <- s.__xmiID__.getIdTrace().normalize(),
		id <- s.__xmiID__.getId(),
		model <- thisModule.model,
		metaclass <- 'Column'.normalize()
	)
	do {
		s.eClass().eAllReferences->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{ref = e, target = e2})))).flatten()->collect(e | thisModule.createEdge(s, e));
		s.eClass().eAllAttributes->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{attr = e, value = e2.toString()})))).flatten()->collect(e | thisModule.createProp(s, e));
	}
}

rule ForeignKey {
	from s : RDBMS!ForeignKey(s.oclIsTypeOf(RDBMS!ForeignKey))
	to  t : ASPm!Node (
		idTrace <- s.__xmiID__.getIdTrace().normalize(),
		id <- s.__xmiID__.getId(),
		model <- thisModule.model,
		metaclass <- 'ForeignKey'.normalize()
	)
	do {
		s.eClass().eAllReferences->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{ref = e, target = e2})))).flatten()->collect(e | thisModule.createEdge(s, e));
		s.eClass().eAllAttributes->select(e | s.eGet(e) <> e.defaultValue)->iterate(e; acc : Sequence(OclAny) = Sequence{} | acc.append((s.eGet(e)->asSequence()->collect(e2 | Tuple{attr = e, value = e2.toString()})))).flatten()->collect(e | thisModule.createProp(s, e));
	}
}

